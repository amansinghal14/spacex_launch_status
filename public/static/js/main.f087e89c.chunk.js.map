{"version":3,"sources":["components/LaunchItem.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","flight_number","launch_date_local","launch_success","mission_name","className","format","to","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","classNames","client","ApolloClient","uri","App","src","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f087e89c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LaunchItem = ({ launch: { flight_number, launch_date_local, launch_success, mission_name } }) => {\r\n  return (\r\n    <div className=\"card card-body mb-3\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-9\">\r\n          <h4>Mission: <span className={launch_success ? 'text-success' : 'text-danger'}> {mission_name} </span></h4>\r\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LaunchItem;","import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport LaunchItem from './LaunchItem';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query launches {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nclass Launches extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h1 className=\"display-4 my-3\">Launches</h1>\r\n        <Query query={LAUNCHES_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if(loading) return <h4>Loading...</h4>\r\n            if(error) console.log(error);\r\n            return <Fragment>\r\n              {\r\n                data.launches.map(launch => (\r\n                  <LaunchItem key={launch.flight_number} launch={launch} />\r\n                ))\r\n              }\r\n            </Fragment>;\r\n          }}\r\n        </Query>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Launches;","import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      launch_date_local\r\n      launch_success\r\n      launch_year\r\n      mission_name\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass Launch extends Component {\r\n  render() {\r\n    let { flight_number } = this.props.match.params;\r\n    flight_number = parseInt(flight_number);\r\n\r\n    return (\r\n      <Fragment>\r\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n          {\r\n            ({ loading, error, data }) => {\r\n              if(loading) return <h4>Loading...</h4>\r\n              if(error) console.log(error);\r\n\r\n              const {\r\n                mission_name,\r\n                flight_number,\r\n                launch_year,\r\n                launch_success,\r\n                rocket: { rocket_id, rocket_name, rocket_type }\r\n              } = data.launch;\r\n\r\n              return (\r\n                <div>\r\n                  <h1 className=\"display-4 my-3\">\r\n                    <span className=\"text-dark\">Mission:</span> {mission_name}\r\n                  </h1>\r\n                  <h4 className=\"mb-3\">Launch Details</h4>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">\r\n                      Flight Number: {flight_number}\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                      Launch Year: {launch_year}\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                      Launch Successful: <span className={classNames({\r\n                        \"text-success\": launch_success,\r\n                        \"text-danger\": !launch_success\r\n                      })}>{launch_success? 'Yes' : 'No'}</span>\r\n                    </li>\r\n                  </ul>\r\n                  <h4 className=\"my-3\">Rocket Details</h4>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">Rocket Id: {rocket_id}</li>\r\n                    <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n                    <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n                  </ul>\r\n                  <hr/>\r\n                  <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\r\n                </div>\r\n              )\r\n            }\r\n          }\r\n        </Query>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Launch;","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <div className=\"container\">\n          <img \n            src=\"https://i.pinimg.com/originals/e5/bd/23/e5bd23574cee3222e088a5de04c28eaf.jpg\" \n            alt=\"spacex logo\"\n            style={{width: 300, display: 'block', margin: 'auto'}}  \n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}